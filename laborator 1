#include <iostream>
#include <fstream>
#include <string>
#include <vector>

struct Software {
    std::string denumire;
    std::string firmaDeProducere;
    int anulEditarii;
    std::string versiune;
};

// Funcție pentru citirea tuturor produselor software dintr-un fișier text
bool CitesteProduseDinFisier(const std::string& numeFisier, std::vector<Software>& produse) {
    std::ifstream fisier(numeFisier);
    if (fisier) {
        produse.clear(); // Golește vectorul de produse

        while (!fisier.eof()) {
            Software produs;
            getline(fisier, produs.denumire);
            getline(fisier, produs.firmaDeProducere);
            fisier >> produs.anulEditarii;
            fisier.ignore(); // Ignorăm caracterul newline
            getline(fisier, produs.versiune);

            if (!produs.denumire.empty()) {
                produse.push_back(produs);
            }
        }

        fisier.close();
        return true;
    }
    return false;
}

// Funcție pentru scrierea tuturor produselor software într-un fișier text
void ScrieProduseInFisier(const std::string& numeFisier, const std::vector<Software>& produse) {
    std::ofstream fisier(numeFisier);
    if (fisier) {
        for (const Software& produs : produse) {
            fisier << produs.denumire << std::endl;
            fisier << produs.firmaDeProducere << std::endl;
            fisier << produs.anulEditarii << std::endl;
            fisier << produs.versiune << std::endl;
        }
        fisier.close();
    }
}

// Funcție pentru afișarea unui produs software
void AfiseazaProdus(const Software& produs) {
    std::cout << "Denumire: " << produs.denumire << std::endl;
    std::cout << "Firma de producere: " << produs.firmaDeProducere << std::endl;
    std::cout << "Anul editării: " << produs.anulEditarii << std::endl;
    std::cout << "Versiune: " << produs.versiune << std::endl;
}

// Funcție pentru afișarea tuturor produselor dintr-un vector
void AfiseazaProduse(const std::vector<Software>& produse) {
    for (const Software& produs : produse) {
        AfiseazaProdus(produs);
        std::cout << std::endl;
    }
}

// Funcție pentru meniu recursiv
void Meniu(std::string& numeFisier, std::vector<Software>& produse) {
    std::cout << "Meniu:" << std::endl;
    std::cout << "1. Citeste produse din fisier" << std::endl;
    std::cout << "2. Afiseaza produse" << std::endl;
    std::cout << "3. Adauga/Modifica produs" << std::endl;
    std::cout << "4. Salveaza produse in fisier" << std::endl;
    std::cout << "5. Iesire" << std::endl;

    int optiune;
    std::cout << "Selectati o optiune: ";
    std::cin >> optiune;

    switch (optiune) {
        case 1:
            if (CitesteProduseDinFisier(numeFisier, produse)) {
                std::cout << "Produsele au fost citite din fisier." << std::endl;
            } else {
                std::cout << "Nu am putut citi produsele din fisier." << std::endl;
            }
            break;
        case 2:
            if (produse.empty()) {
                std::cout << "Nu exista produse de afisat. Va rugam sa cititi produsele mai intai." << std::endl;
            } else {
                std::cout << "Produsele software din fisier sunt:" << std::endl;
                AfiseazaProduse(produse);
            }
            break;
        case 3:
            {
                std::cin.ignore(); // Consuma newline din citirea anterioara
                Software produs;
                std::cout << "Introduceti denumirea: ";
                getline(std::cin, produs.denumire);
                std::cout << "Introduceti firma de producere: ";
                getline(std::cin, produs.firmaDeProducere);
                std::cout << "Introduceti anul editarii: ";
                std::cin >> produs.anulEditarii;
                std::cin.ignore(); // Consuma newline
                std::cout << "Introduceti versiunea: ";
                getline(std::cin, produs.versiune);
                produse.push_back(produs);
                std::cout << "Produsul a fost adaugat/modificat." << std::endl;
            }
            break;
        case 4:
            ScrieProduseInFisier(numeFisier, produse);
            std::cout << "Produsele au fost salvate in fisier." << std::endl;
            break;
        case 5:
            std::cout << "Programul se inchide." << std::endl;
            return;
        default:
            std::cout << "Optiune invalida. Va rugam sa selectati o optiune valida." << std::endl;
    }

    Meniu(numeFisier, produse); // Continua meniul recursiv
}

int main() {
    std::string numeFisier = "software.txt";
    std::vector<Software> produse;
    Meniu(numeFisier, produse);
    return 0;
}
